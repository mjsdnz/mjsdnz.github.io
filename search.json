[{"title":"网络流","date":"2023-05-05T10:18:59.630Z","url":"/2023/05/05/%E7%BD%91%E7%BB%9C%E6%B5%81/","categories":[["图论","/categories/%E5%9B%BE%E8%AE%BA/"]],"content":"对网络流的初步认识写在前面这是本蒟蒻写的第一篇博客，请各位巨佬多多包涵，欢迎指出文章的错误。 什么是网络流？引入在最短路算法的学习中，我们将多个地点之间的道路转化成有向图（或无向图）来处理各个地点的最短路问题。网络流问题也类似，我们可以将生活中比较常见的物料流动系统，比如管道网络、信息网络、电网、物流网络等视为网络流。从生活中的例子里我们发现，网络流问题就是一类处理物料从源点以稳定速率生成，并通过有容量上限的各个物流通道，最后流向汇点的问题。下面给出网络流的具体定义。 定义网络流 G = ( V , E ) 是一个有向图，其中有N 个点、M 条边、源点S 、汇点T ，每条边 有一个非负的容量值 c ( u , v ) 0。 举个栗子：当然，除了表示容量值，我们还需要一个函数来定义当前流量，还有流之间的关系，接下来详细说一下流函数。流函数我们讲 定义为边的流量，并且满足一下性质：1.容量限制：对于所有结点 u , v V ,要求 。2.流量守恒：对于所有的节点 ，要求 。3.斜对称：正向边的流量等于其对应反向边的流量经典问题——网络最大流既然已经明确了网络流的定义，那么不妨来看看这个最经典的网络流问题——网络最大流。通过上面的定义我们不难发现，在整个网络中存在多组流函数，其中使整个网络流量之和最大的流函数被称为最大流，此时的流量被称为最大流量。网络最大流问题既旨在寻找既定网络中的最大流量。为了处理最大流问题，我们伟大的先辈L.R.Ford和D.R.Fulkerson在1962年将原始-对偶算法应用于最大流问题，提出了Ford-Fulkerson方法（由于其方法有多种时间复杂度不同的算法实现，因此《算法导论》将其称为方法而不是算法，这里沿用此定义），下面引入相关概念。 Ford-Fulkerson方法简单来说，Ford-Fulkerson方法就是不断搜索可行的路径，并更新残余网络。 具体步骤： 1.一开始所有边的容量都为0。 2.根据网络流的三大性质，找到一条从s 到t的路径，并更新流量。 3.重复（2）操作，直到无法找到满足三大性质的路径。 那么，根据这三个步骤，我们的程序是不是已经呼之欲出了呢？ 诶，如果你只按这三个步骤搜索的话，或许已经发现这个程序会有一些错误，举个例子。很明显，我们已经没有办法找到其他符合要求的路径了，该网络流的最大流为1，但是我们得到的最大流并不是真正的答案，如果先走再走的话，该网络的最大流为2。究其原因，在的路径中边占据了之后的流量，我们可以认为这是一次 “错误” 的搜索，为了防止这种 “错误” 对以后产生影响，我们引入残留网络的概念。 残留网络：在每次搜索后，在经过的路径上反补一条与该路径方向相反的路径，形成的新图就叫残留网络。 这个过程可以理解为在每次搜索后建立一条用来 “反悔” 的路径，以保证之后的搜索不受 “错误” 查找的影响。Ford-Fulkerson方法就是基于残留网络和反补路径实现的。后文将详细讲述几个基于Ford-Fulkerson方法的算法 Edmonds-Karp算法：EK算法是最典型的实现方式，为了防止在搜索时出现不断搜索一条路径的情况，我们用BFS实现。 Code "},{"title":"test","date":"2023-05-05T02:15:25.081Z","url":"/2023/05/05/test/","categories":[["Test","/categories/Test/"]],"content":"this is a test post成功啦o(￣▽￣)ブ nice 折叠框的标题 666… "}]